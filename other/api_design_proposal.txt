
1) Extract all mutations associated with one serotype (but not others (, at
   least x% of the time) (Queries 2, 3, 4)

    Args:
        serotype:   The serotype to be considered
        exlusive:   A boolean to get only those mutations associated with
        			      a single serotype
        percentage: If exclusive is true, the percentage that corrisponds to a
        			      mutation being exlusive (default is 100% if exclusive)

    Returns:    A list of mutations associated with the particular serotype

PYTHON

percentage = 0
if exclusive:
    if percentage_input < 100:
	percentage = percentage_input
    else:
	percentage = 100

SQL:

WITH MutationPerSerotypeCount AS (
	SELECT sm.mutation_id, ref.serotype_id, COUNT(*) AS mutation_count
	FROM SegmentMutations sm
	JOIN ReferenceSegment ref ON sm.reference_id = ref.reference_id
	JOIN Serotype sero ON ref.serotype_id = sero.serotype_id
	WHERE sero.name = {serotype}
	GROUP BY sm.mutation_id, ref.serotype_id),

MutationTotalCount AS (
	SELECT sm.mutation_id as mutation_id, COUNT(*) AS total_mutation_count
	FROM SegmentMutations sm
	GROUP BY sm.mutation_id)

SELECT m.mutation_name, mpc.mutation_id, mpc.mutation_count,
mpc.mutation_count * 100.0 / mtc.total_mutation_count AS mutation_percentage
FROM MutationPerSerotypeCount mpc
JOIN MutationTotalCount mtc ON mpc.mutation_id = mtc.mutation_id
JOIN Mutation m ON m.mutation_id = mpc.mutation_id
WHERE mpc.mutation_count * 100.0 / mtc.total_mutation_count >= percentage
--------------------------------------------------------------------------------

2) Extract all mutations associated with a certain threshold for a particular
   (list of) metadata (Query 5)

   Args:
      list of:
       metadata_type:   The metadata to be considered (eg: host, location)
       metadata_value:  The considered value for the metadata
       percentage:      Percentage for validity of threshold

   Returns:    A list of corresponding mutations


PROBLEM: How have user select column name in the most elegant way?
- Pivot
- Dictionary
- Enum
--------------------------------------------------------------------------------

3) Extract the most common aminoacid mutation(s) (by serotype or by serotype and
   annotation) (Queries 6, 7, 8)

   Args:
       [serotype:   The serotype to be considered]
       [annotation: The annotation to be considered]

   Returns:    A list of aminoacid mutations, their number and their percentage

SQL:

WITH MostCommonAAMutations AS
    (SELECT previous_AA, resulting_AA, COUNT(*) AS count
    FROM Mutation
    GROUP BY serotype_id, annotation_name)

SELECT * FROM MostCommonAAMutations
ORDER BY count DESC

Python:

Add where serotype/annotation = {serotype/annotation} clause if 
serotype/annotation is not null to MostCommonAAMutations
(or to SELECT if MostCommonAAMutations is a VIEW)
--------------------------------------------------------------------------------

4) Retrieve all markers (and effects, and papers) [exclusively] associated with
   the given mutations (Queries 10, 10b)

   Args:
      list of mutations (by their name)
      exact:   A boolean to get only the specific marker (if any) associated
               with exactly the given mutations
      papers:  A boolean to also get the associated papers
      effects: A boolean to also get the associated effects

   Returns:    A list of markers (and associated effects, papers)

SQL:

WITH mutation_group AS 
    (SELECT mutation_id 
     FROM Mutation 
     WHERE mutation_name IN (???)), 

SELECT marker_id FROM MutationsToMarker
GROUP BY marker_id
HAVING
COUNT(CASE WHEN mutation_id IN (SELECT mutation_id FROM mutation_group ) THEN 1 END) = (SELECT COUNT(*) FROM mutation_group)

Python:

add "AND HAVING (SELECT COUNT(*) FROM mutation_group) = COUNT(*)" if exact is true
also add:

SELECT paper.title with JOIN Paper if papers is true
SELECT effect.effect_full with JOIN Effect if effects is true
--------------------------------------------------------------------------------

5) Retrieve the tuples (mutation, effect) associated with an effect type
   (Queries 13, 14)

    Args:
       effect_type: One of the possible types of effects

    Returns:    A list of tuples containing:
                1. mutation_id
                2. mutation_name
                3. effect_id
                4. effect

SQL:

SELECT DISTINCT mut.mutation_id, mut.mutation_name, e.effect_id, e.effect_full
FROM Mutation mut
JOIN MutationsToMarker mtm ON mut.mutation_id = mtm.mutation_id
JOIN PaperAndEffectOfMarker pem ON mtm.marker_id = pem.marker_id
JOIN Effect e ON pem.effect_id = e.effect_id
WHERE e.effect_type = {effect_type}
--------------------------------------------------------------------------------

6) TODO: Extract all the segments associated with a specific effect

    Args:
       effect_full: One of the possible types of effects

    Returns:    A list of epi_virus_name

SQL:

SELECT DISTINCT seg.epi_virus_name
FROM Segment seg
JOIN SegmentMutations sm ON seg.segment_id = sm.segment_id
JOIN Mutation mut ON sm.mutation.id = mut.mutation_id
JOIN MutationsToMarker mtm ON mut.mutation_id = mtm.mutation_id
JOIN PaperAndEffectOfMarker pem ON mtm.marker_id = pem.marker_id
JOIN Effect e ON pem.effect_id = e.effect_id
WHERE e.effect_full = {effect_full}

